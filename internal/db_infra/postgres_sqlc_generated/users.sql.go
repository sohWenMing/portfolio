// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package postgressqlqueries

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(email, hashed_password)
VALUES($1, $2)
RETURNING id
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const getUserDetailsById = `-- name: GetUserDetailsById :one
SELECT users.id, users.email, users.hashed_password
  FROM users
 WHERE users.id = $1
`

type GetUserDetailsByIdRow struct {
	ID             int64
	Email          string
	HashedPassword string
}

func (q *Queries) GetUserDetailsById(ctx context.Context, id int64) (GetUserDetailsByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserDetailsById, id)
	var i GetUserDetailsByIdRow
	err := row.Scan(&i.ID, &i.Email, &i.HashedPassword)
	return i, err
}
